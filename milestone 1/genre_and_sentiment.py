# -*- coding: utf-8 -*-
"""genre and sentiment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1orFlByUsPD1rBJ1wE2eJWXFG5wZTnviv
"""
from google.colab import drive
drive.mount("/content/gdrive", force_remount=True)

import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from transformers import pipeline
import numpy as np

nltk.download('punkt')
nltk.download('vader_lexicon')
genre_model = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")
sia = SentimentIntensityAnalyzer()

# Define the possible genres for classification
possible_genres = [
    "business meeting", "conference", "discussion",
    "presentation", "interview", "team meeting",
    "project review", "sales pitch", "workshop"
]

# Read the transcript text
input_path = r'/content/gdrive/My Drive/meet/transcription_translated.txt'
with open(input_path, 'r') as file:
    transcript = file.read()

# Step 1: Genre classification
genre_result = genre_model(transcript, possible_genres)
genre = genre_result['labels'][0]  # Take the top genre
print(f"Detected Genre: {genre}")

# Step 2: Sentiment analysis using VADER
sentences = nltk.sent_tokenize(transcript)
sentiment_results = []
sentiment_scores = []

for sentence in sentences:
    score = sia.polarity_scores(sentence)
    compound_score = score['compound']
    sentiment_label = "POSITIVE" if compound_score > 0 else "NEGATIVE" if compound_score < 0 else "NEUTRAL"

    # individual sentences and scores
    sentiment_results.append(f"Sentence: {sentence}\nSentiment: {sentiment_label} (Score: {compound_score:.2f})\n")
    sentiment_scores.append(compound_score)

# Calculate average sentiment score and print it
average_sentiment = np.mean(sentiment_scores)
average_sentiment_label = "POSITIVE" if average_sentiment > 0 else "NEGATIVE" if average_sentiment < 0 else "NEUTRAL"
print(f"Average Sentiment Score: {average_sentiment:.2f} ({average_sentiment_label})")

# Save results to a text file
output_path = r'/content/gdrive/My Drive/meet/transcription_analysis.txt'
with open(output_path, 'w') as file:
    file.write(f"Detected Genre: {genre}\n\n")
    file.write(f"Average Sentiment Score: {average_sentiment:.2f} ({average_sentiment_label})\n\n")

    for result in sentiment_results:
        file.write(result)
#print individual sentiment results and confirm file saving
print("\nSentiment Analysis of Individual Sentences:\n")
for result in sentiment_results:
    print(result.strip())  # Strip leading/trailing whitespace

print(f"Sentiment analysis results saved to {output_path}.")
